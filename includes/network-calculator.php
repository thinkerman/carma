<?

class cidr
		{

			public $counter;
			public $bin;
			public $numberOfHost;
			public $ipAddress;
			public $networkAd;
			public $ip2bin;
			public $mask2bin;
			public $subnetmask;
			public $networkIDIP;
			public $netID2;
			public $one;
			public $two;
			public $three;
			public $file;
			public $uploadedfile;
			public $upload_overrides;
			public $movefile;
			public $filetopen;
			public $fileurl;
			public $fileurl_upload_funtion;
			public $uploadedfilearray;
			public $uploadedfileline;
			public $subnetcounter;


			function __construct(){
				//echo $this -> cidr;
			}

			public function uploadFunction(){

				if ( ! function_exists( 'wp_handle_upload' ) ) {
					    require_once( ABSPATH . 'wp-admin/includes/file.php' );
					}
					if(isset($_POST['file'])){ 
						$file = $_POST['file'];
					}

					$uploadedfile = $_FILES['fileUploaded'];
					$upload_overrides = array( 'test_form' => false );
					$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );
					if ( $movefile && ! isset( $movefile['error'] ) ) {
					    echo "File was successfully uploaded.\n";
					   	//var_dump( $movefile );
					    //echo "<br><pre>".$movefile['url']."</pre>";
					    $this->fileurl = $movefile['url'];
					    return $this->fileurl;



					} else {
					    /**
					     * Error generated by _wp_handle_upload()
					     * @see _wp_handle_upload() in wp-admin/includes/file.php
					     */
					    echo $movefile['error'];
					}

			}

			public function readUploadedFile($filetohandle){
					$this->filetohandle = file_get_contents($this->fileurl, false);
					$this->uploadedfilearray = explode("|allocated", $this->filetohandle);
					foreach ($this->uploadedfilearray as $this->uploadedfileline) {
						
						$stringArray = explode("|", $this->uploadedfileline);
						$valid = filter_var($stringArray[3], FILTER_VALIDATE_IP);
						
						if(filter_var($stringArray[3], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) === false){
							echo "<pre><p class='invalid' style='color:red'>Invalid IP format <br></pre><hr>";
						}else{ 
							echo "<pre>";
							$this->getcidr();
							echo "<br>";
							echo "<hr>";
					}
				}
			}

			public function getcidr(){
				//$stringToProcess = $_POST['fullString'];

				
				$stringToProcess = $this->uploadedfileline;
				$stringArray = explode("|", $stringToProcess);
				$this->ipAddress = $stringArray[3];
				$this->numberOfHost = (int) $stringArray[4];
				try {
					for ($i = 1; $i < $this->numberOfHost; $i *= 2) { 
					$this->counter += 1;

					}

					$cidr = 32 - $this->counter;
					$this->cidr = $cidr;
					$this->counter = 0;

				$this->ipoctet = explode(".",$this->ipAddress);
				$this->lastoctet = (int) $this->ipoctet[3];
					echo "Network: ". $this->ipAddress."/".$this->cidr;
					$this->cidr2netmask($this->cidr);
				
				}catch(Exception $e){

				}
				
				
			}



		    // convert cidr to netmask
		    // e.g. 21 = 255.255.248.0
		    public function cidr2netmask($cidrNumber)
		    {
		    	
		    		$this->bin = null;
			        for( $i = 1; $i <= 32; $i++ ){
			        $this->bin .= $this->cidr >= $i ? '1' : '0';
			        $this->subnetmask = long2ip(bindec($this->bin));
			        }
			        if ( $this->subnetmask == "0.0.0.0"){
			        	return false;
			        }else{
			        	
			        }
			        
			    
		        
		    echo "<br/>Subnet Mask: ".$this->subnetmask."<br>";	
		   

		    $this -> cidr2network($this ->ipAddress, $this->cidr);
		    }

		    // get network address from cidr subnet
		    // e.g. 10.0.2.56/21 = 10.0.0.0
		    public function cidr2network($ip, $cidr)
		    {
		        $network = long2ip((ip2long($ip)) & ((-1 << (32 - (int)$cidr))));

		        /*$exploded = explode(".",$network);
		        $explodedlastoctet = (int) $exploded[3] + 1;
		        echo "string: ".$explodedlastoctet . "<br>";*/

		        echo "Network Address: ". $network;

		       //$this->netmask2cidr($this ->subnetmask);
		    
		    }

		    //perform negative ANDing of ip ^ subnet bin to get last ip in the network 
		    public function netmask2cidr($netmask)
		    {
		        $bits = 0;
		        $subnetmask = explode(".", $netmask);
		        foreach($subnetmask as $octect)
		        $bits += strlen(str_replace("0", "", decbin($octect)));
		    	echo "<br/>CIDR From Netmask: ".$bits;
		    
		    }

		    // is ip in subnet
		    // e.g. is 10.5.21.30 in 10.5.16.0/20 == true
		    //      is 192.168.50.2 in 192.168.30.0/23 == false
		    public function cidr_match($ip, $network, $cidr)
		    {
		        if ((ip2long($ip) & ~((1 << (32 - $cidr)) - 1) ) == ip2long($network))
		        {
		            return true;
		        }

		    return false;
		    }

		    public function networkID($ip){
		    	//$bits = 0;
		        $netID = explode(".", $ip);
		        $bitOctet = 0;
		        foreach($netID as $octect){
		        $bitOctet += 1;
		        }
		        $this->ip2bin = sprintf("%08b.%08b.%08b.%08b", $netID[0], $netID[1], $netID[2], $netID[3]);
		        echo "<br />IP2Bin: " . $this->ip2bin;
		        $this->subnet2bin($this->subnetmask);
 	
		    }


		    public function subnet2bin($subnetmaskarg){
		    	


		    	$netID = explode(".", $subnetmaskarg);
		        $bitOctet = 0;
		        

		        $this->subnet2bin = sprintf("%08b.%08b.%08b.%08b", $netID[0], $netID[1], $netID[2], $netID[3]);
		        echo "<br />Subnet2Bin: " . $this->subnet2bin . "<br />";

		        $this->networkIDIP =  $this->ip2bin & $this->subnet2bin ."<br/>";

		       $this->netID2 = explode(".",$this->networkIDIP);
		       foreach ($this->netID2 as $x) {
		      	sprintf("%08b", ~$x) ;
		      }

		    }

		}


if (!isset($_POST['carma_upload']) || !wp_verify_nonce($_POST['carma_upload'],'submit_form')){

	 print 'Sorry, your nonce did not verify.';
	 exit;
} else {

	if (isset($_POST['calculate'])){

		$fileUpload = new cidr();
		//$a = $fileUpload->uploadFunction();
		//	echo "<br>".$a;


		//open uploaded file;

		$fileUpload->readUploadedFile($fileUpload->uploadFunction());

	}
	//$cidrClass = new cidr();